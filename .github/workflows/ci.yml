# .github/workflows/ci.yml
name: Java CI with Maven and Docker Build (Separated Jobs)

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  build-and-test-java:
    runs-on: ubuntu-latest
    outputs:
      project_version: ${{ steps.get_version.outputs.PROJECT_VERSION }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build with Maven
      run: mvn -B verify

    - name: Get Project Version
      id: get_version
      run: echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
      shell: bash

  docker-build-image:
    runs-on: ubuntu-latest
    needs: [build-and-test-java]
    outputs:
      docker_image_name: ${{ steps.set_image_vars.outputs.DOCKER_IMAGE_NAME }}
      docker_image_tag: ${{ steps.set_image_vars.outputs.DOCKER_IMAGE_TAG }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      id: set_image_vars
      run: |

        IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/userservice-api"

        if [[ "${{ github.ref_name }}" == "main" ]]; then
          TAG="latesst"
        else
          TAG="${{ github.ref_name }}"
        fi

        docker build -t "$IMAGE_NAME:$TAG" .

        echo "DOCKER_IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
        echo "DOCKER_IMAGE_TAG=$TAG" >> "$GITHUB_OUTPUT"
      shell: bash

  docker-push-image:
    runs-on: ubuntu-latest
    needs: [docker-build-image]

    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      run: |
        IMAGE_NAME="${{ needs.docker-build-image.outputs.docker_image_name }}"
        TAG="${{ needs.docker-build-image.outputs.docker_image_tag }}"
        docker push "$IMAGE_NAME:$TAG"
      shell: bash
